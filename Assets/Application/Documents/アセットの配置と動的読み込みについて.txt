■アセットの配置と動的読み込みについて

===============================================================
●配置

Unityプロジェクト内のアセット(リソース)の配置場所は、
大きく分けて以下の３つのフォルダになります。

/Assets/Applicstion 以下


1)　/AssetBundle

　　　アセットバンドル化予定のアセット(リソース)を配置します。
　　　将来的に別レポジトリに分かれ、本Unityプロジェクトからは削除されます。

　　　"アプリケーションバイナリに内包されるシーンファイルやプレハブファイルから、
　　　 このフォルダ内に配置されたアセット(リソース)への直接参照を行ってはいけません"

　　　スクリプトでの動的なロード専用のフォルダとなります。


2)　/ReferencedAssets

　　　AssetBunleフォルダとは逆に、
　　　アプリケーションバイナリに内包されるシーンファイルやプレハブファイルから、
　　　直接参照されるアセット(リソース)を配置します。

　　　"スクリプトでの動的なロードは出来ません"
　　
　　　シーンファイルやプレハブファイルからの直接参照専用のフォルダとなります。


3)　/Resources

　　　ランタイムのメソッド Resources.Load() で読み出すことができる、
　　　アプリケーションバイナリに内包されるアセット(リソース)を配置します。

　　　アプリケーションバイナリに内包されるシーンファイルやプレハブファイルから、
　　　直接参照する事も可能ですが、極力それは行わないようにしてください。

　　　※使用方法が直接参照のみであれば、/ReferencedAssets に配置すること。

　　　こちらに配置して良いのは、以下の理由が必要であるもののみです。

　　　　・アプリケーションバイナリに内包する必要がある(ネットワークからダウンロード出来ない理由がある)
　　　　・Resources.Load() によるスクリプト内での動的ロードが必要になる

　　　このフォルダ内に配置されたアセット(リソース)は、
　　　実際に使用されているかどうかに関わらずアプリケーションバイナリに内包されてしまい、
　　　アプリケーションバイナリサイズの無用な肥大化を招く可能性があります。
　　　然るべき理由のあるアセット(リソース)のみ、ここに配置するようにしてください。


===============================================================
●読み込み

/AssetBundle 以下に配置したアセット(リソース)は、
本プロジェクト用に用意されたクラス・メソッドを用いて、
スクリプトで動的に読み込む必要があります。

内部的な処理は、

　/Assets/Application/Libraries/System/AssetBundleHelper/AssetBundleManager.cs

が行っていますが、
直接的な操作クラスは、

　/Assets/Application/Scripts/_00_Framework/Asset.cs

となっています。


　例

　　// 同期ロード(ロードが完了するまでメソッド内で処理がブロックされる)
　　Texture t = Asset.Load<Texture>( "Textures/sample" ) ;

　　// 非同期ロード(メソッド内で処理がブロックされる事は無いが、処理の完了を自ら管理する必要がある)
　　Texture t ;
　　yield return Asset.LoadAsync<Texture>( "Textures/sample", ( _ ) => { t = _ ; } ) ; // 読み込み完了後にコールバックでインスタンスが渡される


　▲パスの記述方法

　　ロードメソッドを呼ぶ際のアセットのパスは、

　　　/Assets/Application/AssetBundle

　　以下のものを記述します。

　　ただし、以下の注意点があります。

　　　/AssetBundle 以下のフォルダ・ファイルは、ネットワークからダウンロードするため、いずれアセットバンドル化されます。

　　　アセットバンドルは、単独のファイルまたは複数のファイルをまとめたフォルダから生成する事ができます。

　　　単独のファイルをアセットバンドル化する場合は、パスの記述方法は変わりません。

　　　複数のファイルから成るフォルダをアセットバンドル化した場合、
　　　そのアセットバンドル内のアセットを指定するためのパスの記述方法は、以下の形になります。

　　　"アセットバンドルのパス" + // + "アセットバンドル内のアセットのパス" ※拡張子無し

　　　　例
　　　　　/Sounds/SE　　←このフォルダをアセットバンドル化(内部に click.wav cancel.wav が含まれる)
　　　　　　click.wav
　　　　　　cancel.wav

　　　　 　　↓

　　　　　/Sounds/SE　　←１つのアセットバンドルファイル(SE)が出力

　　　　　// 同期ロードで click.wav を読み出す
　　　　　AudioClip click = Asset.Load<AudioClip>( "Sounds/SE//click" ) ;

　　　　　// 非同期ロードで click.wav を読み出す
　　　　　AudioClip click ;
　　　　　yield return Asset.LoadAsync<AudioClicp>( "Sounds/SE//click", ( _ ) = { click = _ ; } ) ;


　　　アセットバンドル化する前の /AssetsBundle フォルダ内のアセットも // の形で問題なくロード可能です。
　　　
　　　　※注意
　　　　　/AssetBundle 下にアセットのファイルを配置する段階で、予め、
　　　　　どの単位(ファイルなのかフォルダなのか)でアセットバンドル化を行うのかの設計を行う事が重要になります。
　　　　　(基本にして極意)

　　　　例
　　　　　効果音(SE)のアセットバンドル化を行う場合、

　　　　　・全ての場面に渡って使用されるもの
　　　　　　　→/Sounds/SE/Common/　
　　　　　・特定の場面(戦闘など)のみで使用されるもの
　　　　　　　→/Sounds/SE/Battle/

　　　　　といった単位でアセットバンドル化する。

　　　　　ランダムアクセス的に使用されるものは１つ(１つのアセットバンドル)にまとめる事が理想だが、
　　　　　まとめ過ぎると、一部のファイルの更新にも関わらず、本来更新の必要のないファイルまで大量に更新される事になってしまう。
　　　　　逆に、細かく分けすぎると、頻繁なダウンロードによる、接続ボトルネックが増大してしまう。


　▲アセットバンドル化の方法

　　本プロジェクトでのアセット(リソース)のアセットバンドル化は、以下のツールを使用して行います。

　　/Assets/Application/Tools/SimpleAssetBundleBuilder/Editor/SimpleAssetBundleBuilder.cs


　　1)
　　　Unity メニューの
　　　
　　　　Tools -> SimpleAssetBundleBuilder 

　　　で、アセットバンドル化ツールが起動します。


　　2)
　　　/Assets/Application/AssetBundle/list.txt を選択して、
　　　アセットバンドル化ツールの [Resource List File Path] ボタンを押します。

　　　すると、
　　　アセットバンドル化で出力されるファイルの一覧がツールに表示されます。
　　　　※[]内の数値は、そのアセットバンドルファイルに含まれるアセットの数を表しています。　　

　　3)
　　　/Assets/StreamingAssets 内に、出力したいプラットフォームに応じて、
　　　以下のフォルダを作成してください。

　　　　/Beast/Windows
　　　　　→スタンドアロン用

　　　　/Beast/Android
　　　　　→Android用

　　　　/Beast/iOS
　　　　　→iOS用

　　4)
　　　作成した出力したいプラットフォームのフォルダを選択して、
　　　アセットバンドル化ツールの [AssetBundle Root Folder Path] ボタンを押します。

　　　すると、
　　　[Create Or Update] ボタンが表示されます。


　　5)
　　　[Create Or Update] ボタンを押すと、アセットバンドルの生成が開始されます。


　　　※注意
　　　　アセットバンドルの生成によって出力される
　　　　フォルダ名・ファイル名は全て小文字になります(仕様)

　　　　ただし、スクリプト内のロードメソッドのパスを、それに合わせて小文字にする必要はありません。

　　　　※全て小文字になるという制約上、
　　　　　同じフォルダ内に、小文字・大文字違いの同名のフォルダ・ファイルを配置する事は出来ません。

　　　　　例　以下は不可

　　　　　　/Sounds/SE
　　　　　　　Click.wav
　　　　　　　click.wav


　▲実機(Android・iOS)での実行時の制約

　　/Assets/Application/AssetBundle 以下のアセット(リソース)ファイルは、
　　実機(Android・iOS)では、読み込む事が出来ません(UnityEditor限定です)

　　読み込めるようにするには、
　　上記で説明したアセットバンドル化による /StreamingAssets 内への設置が必要になります。

　　実機では、/Assets/Application/AssetBundle 以下からではなく、
　　/StreamingAssets 内に配置されたアセットバンドルからの読み込みに、自動的に切り替わります。

　　※ですので、パスの指定は // を用いて、
　　　アセットバンドルのパスとアセットバンドル内のアセットのバスを明示的に指定する必要があります。


　　尚、/StreamingAssets への配置はデバッグ用動作であり、
　　実際は、開発中期からリリース以後は、

　　　/beast-client/AssetBundle 

　　といったフォルダにアセットバンドルを出力、クラウドストレージに配置し、
　　ネットワークを介してダウンロード・読み込みが行われるようになります。


　　※アセットバンドル化ツールは、コマンドラインからも実行可能で、
　　　任意のフォルダ(/Assets外も可)に、アセットバンドルファイルを出力する事が可能です。


　▲同期ロードメソッドと非同期ロードメソッドの大きな違い

　　以下のような大きな違いがあり、必要に応じて適切に使い分ける必要があります。


　　□同期ロード(.Load系)

　　　・処理がメソッド内でブロッキングされるがロード時間は最速。
　　　・予めアセットバンドルがダウンロードされていなければエラーとなる(nullが返される)　　

　　□非同期ロード(.LoadAsync系)

　　　・処理がブロッキングされる事は無いがロード時間は伸びる。
　　　　どんなに小さい(ロード時間が短い)アセットのロードであっても、
　　　　最低１フレーム分の時間がかかってしまう。

　　　　　例
　　　　　　実質 1ms で読み込めるアセットだとして、
　　　　　　30 FPS 環境の場合、
　　　　　　ロード完了まで最短でも 33.3ms (1s/30) かかってしまう。

　　　　　　1ms で読み込めるアセットを 30個非同期ロードすると、

　　　　　　　33.3ms x 30 = 1s

　　　　　　1s かかってしまうが、
　　　　　　これを同期ロードすると、

　　　　　　　1ms x 30 = 30ms

　　　　　　わずか 30ms (非同期ロードの 1/30 以下)で完了する。

　　　・アセットバンドルがダウンロードされていない場合、
　　　　自動的にダウンロードを行い、ダウンロード完了後にアセットを読み出してくれる。


　　　　例　エラーを起こさない効率的なコードの記述方法

　　　　　　string path = "Sounds/SE//click" ;
　　　　　　AudioClip click = Asset>oad<AudioClip>( path ) ;
　　　　　　if( click == null )
　　　　　　{
　　　　　　　　yield return Asset.LoadAsync<AudioClip>( path, ( _ ) => { click = _ ; } ) ;
　　　　　　}

　　　　　　上記の例の場合、
　　　　　　click の読み出しが同期ロードで 1m の場合、処理は最速で 1m で完了する。
　　　　　　(既にアセットバンドル Sounds/SE がダウンロード済みの場合)
　　　　　　しかも、アセットバンドルがダウンロードされていなくてもエラーとはならず、
　　　　　　その場合は、ダウンロード時間 + 1フレーム時間で、処理が完了する。

