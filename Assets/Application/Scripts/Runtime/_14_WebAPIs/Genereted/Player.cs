using System ;
using System.Collections.Generic ;
using Cysharp.Threading.Tasks ;
using UnityEngine ;

//<auto-generated>
//Beast.ShareClientGeneratorによる自動生成されたファイルです。手動変更禁止
//<auto-generated>
namespace Template.WebAPIs
{
	/// <summary>
	///  Player カテゴリの通信 API 群
	/// </summary>
	public partial class  Player : WebAPIBase
	{


		/// <summary>
		/// WebAPI:Maintenanceのリクエストデータクラス
		/// </summary>
		[Serializable]
		public partial class Login_Request : RequestBase
		{
		}

		/// <summary>
		/// WebAPI:Maintenanceのレスポンスデータクラス
		/// </summary>
		[Serializable]
		public partial class Login_Response : ResponseBase
		{
			[SerializeField]
			public long playerId ;
			public long PlayerId { get { return playerId ; } }

			[SerializeField]
			public String accessToken ;
			public String AccessToken { get { return accessToken ; } }
		}




		//-----------------------------------------------------------

		// <summary>
		/// 通信 API:クライアントバージョン、マスタデータバージョンチェックを行う
		/// </summary>
		/// <returns></returns>
		public async UniTask<Login_Response> Create( Action<int, string, Login_Response> onReceived = null, Action<int, int> onProgress = null, bool useProgress = true, bool useDialog = true, bool isCheckVersion = true )
		{
			// リクエストデータを生成する
			Login_Request request = new Login_Request()
			{
				
			} ;

			// リクエストデータをシリアライズする
			byte[] requestData = Serialize( request ) ;
			// 正常系の対応のみ考えれば良い(エラーはWebAPIManager内で処理される)
			( int httpStatus, string errorMessage, byte[] responseData ) = await WebAPIManager.SendRequest
			(
				"player/create", // API
				requestData,	// リクエストデータ
				onProgress,
				useProgress,
				useDialog
			) ;

			if( responseData == null )
			{
				// エラーの場合のHttpStatusとErrorMessageはコールバックで取得する(通常は必要としないため)
				onReceived?.Invoke( httpStatus, errorMessage, null ) ;
				return null ;	// エラー
			}

            // レスポンスデータをデシリアライズする
			var response = await Deserialize<Login_Response>( responseData, isCheckVersion );
			onReceived?.Invoke( httpStatus, errorMessage, response ) ;
			return response ;
		}



		// <summary>
		/// 通信 API:クライアントバージョン、マスタデータバージョンチェックを行う
		/// </summary>
		/// <returns></returns>
		public async UniTask<Login_Response> Login( Action<int, string, Login_Response> onReceived = null, Action<int, int> onProgress = null, bool useProgress = true, bool useDialog = true, bool isCheckVersion = true )
		{
			// リクエストデータを生成する
			Login_Request request = new Login_Request()
			{
				
			} ;

			// リクエストデータをシリアライズする
			byte[] requestData = Serialize( request ) ;
			// 正常系の対応のみ考えれば良い(エラーはWebAPIManager内で処理される)
			( int httpStatus, string errorMessage, byte[] responseData ) = await WebAPIManager.SendRequest
			(
				"player/login", // API
				requestData,	// リクエストデータ
				onProgress,
				useProgress,
				useDialog
			) ;

			if( responseData == null )
			{
				// エラーの場合のHttpStatusとErrorMessageはコールバックで取得する(通常は必要としないため)
				onReceived?.Invoke( httpStatus, errorMessage, null ) ;
				return null ;	// エラー
			}

            // レスポンスデータをデシリアライズする
			var response = await Deserialize<Login_Response>( responseData, isCheckVersion );
			onReceived?.Invoke( httpStatus, errorMessage, response ) ;
			return response ;
		}

	}
}
